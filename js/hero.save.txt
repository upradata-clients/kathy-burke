<style>

    .t-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
    }
    
    .uc-signature .t-img {
        height: auto;
    }
    
    
    .uc-hero-block {
        position: relative;
        display: none;
        overflow: hidden;
    }
    
    .uc-hero-block > .t107 svg {
        height: 100vh;
        width: 100vw;
        object-fit: cover;
    }
    
    .uc-hero-block-img img {
        height: 100vh;
        width: 100vw;
        object-fit: cover;
    }
    
    
    .uc-hero-block.svg-active {
        position: relative;
        display: block;
    }
    
    .uc-hero-block-img.svg-active {
        display: none;
    }
    
    
    .uc-signature {
        opacity: 0;
    }
    
    .uc-signature svg path {
        stroke-width: 0.7px;
    }
    
    
    .uc-signature .t-img {
        width: 150px;
        position: absolute;
        bottom: 44px;
        right: 70px;
    }
    
    .uc-signature .t107__widthauto {
        margin: unset;
    }

    
    .uc-notre-dame-block {
        position: absolute;
        top: 0;
        left: 0;
        /*right: 0;
        bottom: 0;*/
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        background: white;
        /*clip-path: inset(100% 0% 100% 0%);*/
        opacity: 0;
        z-index: 1000;
    }
    
    
    .uc-notre-dame-block h3 {
        position: absolute;
        top: 9%;
        left: 56%;
        transform: translate(-50%, -50%);
        color: rgb(131 159 189);
        font-size: 19px;
        font-weight: 500;
        padding: 20px 56px;
        background: white;
        border-radius: 6px;
        opacity: 0;
    }
    
    .uc-hero-block .t107, .uc-hero-block .t107 .t-align_center {
        height: 100%;
    }
    
    #painting-5.flip-active {
        visibility: hidden;
    }
    
    #painting-5.flipping {
        visibility: visible
    }
    
    .uc-notre-dame-block.flip-active {
        opacity: 1;
    }
    
    
</style>



<script>

(() => {
            
    _.EventNames.hero = {
        firstScrubDone: 'hero:first-scrub-done'
    };

    const init = async () => {

        const heroBlock = _.queryThrow('.uc-hero-block');
        const heroBlockImg = _.queryThrow('.uc-hero-block-img');
        const signatureBlock = _.queryThrow('.uc-signature');
        
        signatureBlock.classList.remove('r_hidden', 'r_anim');
        heroBlockImg.classList.remove('r_hidden', 'r_anim');
    
        await svgImageToInline(_.queryThrow('img', heroBlock));
        await svgImageToInline(_.queryThrow('img', signatureBlock));
        
        
        heroBlock.classList.add('svg-active');
        heroBlockImg.classList.add('svg-active');
        

        
        heroBlock.append(signatureBlock);
    
        
        const tl = gsap.timeline();
        
        const apparitionTL = gsap.timeline();
        apparitionTL.to(signatureBlock, { opacity: 1, duration: 1, ease: 'expo.out' });
        
        const signaturePaths = _.queryAllThrow('svg path', signatureBlock);
        
        const drawTl = gsap.timeline({ paused: true });
        const duration = 2;
        
        const getLength = DrawSVGPlugin.getLength;
        const getProportion = path => getLength(path) / totalLength;
        
        const totalLength = signaturePaths.reduce((total, path) => total + getLength(path), 0);
        
        signaturePaths.forEach(path => drawTl.from(path, { duration: getProportion(path) * duration, drawSVG: 0 } ));
        
        
        tl.add(apparitionTL);
        
        tl.to(drawTl, {
            time: drawTl.duration(),
            duration: drawTl.duration(),
            ease: 'power1.inOut'
        }, 0.5);
        
        
        gsap.registerPlugin(Flip);
    
        const hero = _.queryThrow('.uc-hero-block');
        const heroContainer = _.queryThrow('.t107', hero);
        
        const notreDame = _.queryThrow('.uc-notre-dame-block');
        const notreDameTitle = _.queryThrow('.uc-nd-title-block h3');
        
        // notreDameTitle.classList.add('hand-font');
        
        notreDame.append(notreDameTitle);
        
        hero.append(notreDame);
        
        const centralPainting = _.queryThrow('#painting-5', heroContainer);
        
        const createflipCentralImageWithKathyAnimation = duration => {
            
            notreDame.dataset.flipId = 'hero-flip';
            centralPainting.dataset.flipId = 'hero-flip';
            
            const state = Flip.getState([ centralPainting, notreDame ]);
        
            centralPainting.classList.add('flip-active');
            notreDame.classList.add('flip-active');
        
            return Flip.from(state, {
                duration, toggleClass: 'flipping', ease: 'expo.inOut'
            });
        };
        
        
        let isScrubHasLeft = false;

        
        const tlScrub = gsap.timeline({
            scrollTrigger: {
               onLeave: () => {
                    if(!isScrubHasLeft) {
                        _.dispatchEvent(_.EventNames.hero.firstScrubDone);
                    }
                    
                    isScrubHasLeft = true;
                },
                markers: false,
                trigger: hero,
                scrub: 1,
                pin: hero,
                toggleActions: 'restart complete reverse reset',
                start: 'top=50 top',
                end: 'bottom+=200% top',
               // end: 'bottom top',
               // fastScrollEnd: true,
                /*onEnterBack: ({progress, direction, isActive}) => {
                     gsap.set(notreDame, {
                        ...getNotreDamePosition(),
                        opacity: 0,
                    }),
                }*/
            }
        });

        
        
        const heroRect = hero.getBoundingClientRect();
        const paintingRect = centralPainting.getBoundingClientRect();
        
        
        gsap.set(notreDame, { autoAlpha: 0 });
        _.queryThrow('img', notreDame).dataset.lazyRule = 'skip'; // optimoff
        const notreDameImgCopy = _.queryThrow('img', notreDame).cloneNode(true);
        
        /*const src = _.queryThrow('meta', notreDame).content;
        const parts = src.split('/');
        
        notreDameImgCopy.src = [...parts.slice(0, -1),['-/format/webp'],parts.at(-1)].join('/').replace('static', 'optim');
        notreDameImgCopy.classList.add('loaded');*/
        
        // https://static.tildacdn.net/tild6565-3635-4238-b465-613736323063/KATHY_BURKE_PORTRAIT.jpeg
        // https://optim.tildacdn.net/tild6565-3635-4238-b465-613736323063/-/resize/196x/-/format/webp/KATHY_BURKE_PORTRAIT.jpeg
        // https://optim.tildacdn.net/tild6361-3430-4335-a363-343965616335/-/format/webp/2-small.jpeg
        
        const setNotreDameImgCopyPosition = () => {
            const paintingRect = centralPainting.getBoundingClientRect();

            gsap.set(notreDameImgCopy, {
                position: 'absolute',
                top: window.pageYOffset + paintingRect.top,
                left: window.pageXOffset + paintingRect.left,
                width: paintingRect.width,
                height: paintingRect.height
            });
        };
        
        setNotreDameImgCopyPosition();
        gsap.set(notreDameImgCopy, { opacity: 0 });
        
        
        heroContainer.append(notreDameImgCopy);
        
        
        const middle = (a, b) => (a - b) / 2;
        
        const delta = {
          x: middle(heroRect.width - paintingRect.width) / heroRect.width,
          y: middle(heroRect.height - paintingRect.height) / heroRect.height,
        };
    
    
        tlScrub.to(signatureBlock, { opacity: 0, duration: 0.5, ease: 'expo.out' });
    
    
        const scale = {
            start: 0,
            duration: 1,
            value: 1.5
        };
        
        tlScrub.to(heroContainer, {
           transformOrigin: `${50 - delta.x}% ${50 - delta.y}%`,
           scale: scale.value,
           ease: 'power2.inOut',
           duration: scale.duration,
        }, scale.start);
        
        tlScrub.to(notreDameImgCopy, {
           opacity: 1,
           ease: 'power2.inOut',
           duration: 0.6
        }, 0.2);
        
        
        tlScrub.to(centralPainting, {
           opacity: 0,
           ease: 'power2.inOut',
           duration: 0.6,
        }, 0.2);
        
        
        // because of a bug with scrollTrigger when page loads when scrollTrigger is not 0
        let notreDameSizeState = undefined;
        
        const getNotreDamePosition = prop => () => {
            const rect = notreDameImgCopy.getBoundingClientRect();
            
            const progress = gsap.utils.clamp(0, 1, tlScrub.scrollTrigger.progress / (scale.duration - scale.start));
            
            
            /*
            const deltaScale = scale.value - 1;
            const progressScale = progress * deltaScale;
            
            const sizes = {
                width: rect.width *  (1 + progressScale),
                height: rect.height * (1 + progressScale)
            };
            
           return {
                top: window.pageYOffset + rect.top   - (sizes.height - rect.height) / 2,
                left: window.pageXOffset + rect.left - (sizes.width - rect.width) / 2,
                ...sizes
            };*/
            
            if(notreDameSizeState === undefined) {
                notreDameSizeState =  {
                    top: window.pageYOffset + rect.top,
                    left: window.pageXOffset + rect.left,
                    width: rect.width,
                    height: rect.height,
                    progress
                };
            }
            
            return notreDameSizeState[prop];
        };
        

         tlScrub.set(notreDame, {
            top: getNotreDamePosition('top'),
            left: getNotreDamePosition('left'),
            width: getNotreDamePosition('width'),
            height: getNotreDamePosition('height'),
            autoAlpha: 1
        }, 1);
        
        tlScrub.to(notreDame, {
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            ease: 'expo.in',
            duration: 1
        }, '+=0.01');
        
        tlScrub.to(notreDameTitle, { opacity: 1, duration: 0.4, ease: 'expo.out' }, "+=0.4");
        
        
        tlScrub.to(notreDame, { duration: 1 });
        
    };
    

    
    _.onLoad(init);
    
 
})();

</script>
